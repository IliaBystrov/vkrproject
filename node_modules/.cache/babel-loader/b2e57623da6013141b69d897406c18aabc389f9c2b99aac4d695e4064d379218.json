{"ast":null,"code":"import React, { useState } from 'react';\nimport QPool from './qpoll';\nimport { MainButtoms } from './mainbuttons';\nimport { Result } from './Result';\nimport ReactDOMServer from 'react-dom/server';\nimport { MainPanel } from './mainpanel';\nexport const App = () => {\n  var Res_title = '';\n  var vis = false;\n  /*const [items, setValue] = useState([\r\n      {\r\n          id: 0,\r\n          Item_order: '',\r\n          question_type: '',\r\n          question_text: '',\r\n          answer: []\r\n      }\r\n  ]);*/\n\n  /*const [shablon_cards, setCard] = useState([\r\n      {\r\n          id: 0,\r\n          title: 'Shablon 1',\r\n          link: 'https://Shablon1',\r\n          data: '01.02.2023'  \r\n      },\r\n      {\r\n          id: 1,\r\n          title: 'Shablon 2',\r\n          link: 'https://Shablon2',\r\n          data: '21.05.2023'  \r\n      }\r\n  ]);\r\n  \r\n  //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\r\n  //Работает, но нужно связать с бд\r\n  const ReloadCardList =()=>{\r\n      var title = document.getElementById(\"InSearch\");\r\n      setCard((prevState) => []);\r\n      //Тут надо получить данные из бд и запихнуть их в cards\r\n      //Get date from bd -> cards [{id: , title: , link: , data: }]\r\n      const cards = [{id:3, title: \"Title\", link: \"link\", data: \"02.02.2022\"},\r\n      {id:4, title: \"Title2\", link: \"link\", data: \"02.02.2023\"}]\r\n        cards.map((card) => {\r\n          addcard(card.id, card.title, card.link, card.data);\r\n      })\r\n  };\r\n  //Работает\r\n  const addcard = (c_id, c_title, c_link, c_data) => {\r\n        var newcard = {\r\n          id: c_id,\r\n          title: c_title,\r\n          link: c_link,\r\n          data: c_data \r\n      };\r\n      setCard((prevState) => [...prevState, newcard]);\r\n  };*/\n\n  //Добавляем вопрос\n  /*const additem = () => {\r\n      let i = 0;\r\n      for(var j=0;j<items.length;j++){\r\n          if(items[j].id>i){\r\n              i=items[j].id;\r\n          }\r\n      }\r\n      i++;\r\n      var newitem = {\r\n          id: i,\r\n          Item_order: '',\r\n          question_type: '',\r\n          question_text: '',\r\n          answer: []\r\n      };\r\n      setValue((prevState) => [...prevState, newitem]);\r\n      //Вывод для проверки\r\n      //console.log(i);\r\n  };*/\n  //Удаляем вопрос\n  /*const deleteitem = (id) =>{\r\n      var count = items.length;\r\n      if(count > 1){\r\n          setValue((prevState) => {\r\n              const idx = prevState.findIndex((item) => item.id === id);\r\n              return[...prevState.slice(0,idx), ...prevState.slice(idx+1)];\r\n          });\r\n          //Для проверки\r\n          count--;\r\n      } \r\n      else{ \r\n          alert('Нельзя удалить единственный вопрос!');\r\n      };\r\n      //Для проверки\r\n      //console.log(count);\r\n  };*/\n  //Получаем текст и варианты ответов на вопросы\n  /*const SetQuestion = (id, type) =>{\r\n      var qtype = type;\r\n      var qtext ='';\r\n      var qans =[];\r\n      var a, j;\r\n      var inputs = document.getElementsByName('question_area_' + id);\r\n      for (j = 0; j < inputs.length; j++) {\r\n          a = inputs[j];\r\n          qtext = a.value;\r\n      }\r\n      if((qtype !== 'short') || (qtype !== 'long')){\r\n          inputs = document.getElementsByName('answer_area_' + id);\r\n          for (j = 0; j < inputs.length; j++) {\r\n              a = inputs[j];\r\n              qans.push(a.value);\r\n          }\r\n      }\r\n      var copy = Object.assign([], items);\r\n      var idx = copy.findIndex((item) => item.id === id);\r\n      var newitem={\r\n          id: id,\r\n          question_type: qtype,\r\n          question_text: qtext,\r\n          answer: qans\r\n      };\r\n      copy[idx]=newitem;\r\n      setValue(copy);\r\n        console.log(qtype);\r\n      console.log(qtext);\r\n      console.log(qans);\r\n  };*/\n  //Поиск\n  //Добавить запись в бд\n  /*const SaveShablon = () => {\r\n      var s_title = document.getElementById(\"shablon_title\");//Название шаблона\r\n      var s_type = document.getElementById(\"typeselect\");//Тип шаблона\r\n      //Данные о вопросах шаблона беруться из items, ниже цикл для перебора элементов элементов\r\n      var items_copy = Object.assign([], items);\r\n      for(var i = 0; i<items_copy.length; i++){\r\n          items_copy[i].id\r\n          items_copy[i].question_type\r\n          items_copy[i].question_text\r\n          items_copy[i].answer\r\n      }\r\n      console.log(s_title.value);\r\n      console.log(s_type.value);\r\n      console.log(items);\r\n  };*/\n  //Новый шаблон-очистить поле создания шаблона+\n  /*const NewShablon =()=>{\r\n      let new_list = [{\r\n          id: 0,\r\n          Item_order: '',\r\n          question_type: '',\r\n          question_text: '',\r\n          answer: []        \r\n      }];\r\n      setValue((prevState) => new_list);\r\n      let title = document.getElementById('shablon_title');\r\n      title.value=\"\";\r\n      let stype = document.getElementById(\"typeselect\");\r\n      stype.value=\"public\";\r\n      let mp = document.getElementById('mainp');\r\n      mp.innerHTML = ReactDOMServer.renderToString(<MainPanel></MainPanel>);\r\n  };*/\n  //Копировать шаблон\n  /*const CopyShablon =(id)=>{\r\n      var s_copy = Object.assign([], shablon_cards);\r\n      var i_copy = [];\r\n      var new_shablon;\r\n      for(var i = 0; i<s_copy.length; i++){\r\n          if(s_copy[i].id === id){\r\n              new_shablon = {\r\n                  id: s_copy[i].id,\r\n                  title: s_copy[i].title,\r\n                  link: s_copy[i].link,\r\n                  data: s_copy[i].data,\r\n              }\r\n              break;\r\n          }\r\n      }\r\n      console.log(new_shablon);\r\n      //Здесь надо получить записи о вопросах данного шаблона\r\n      //из бд и запихнуть их в i_copy, после чего записать\r\n      //данные из new_shablon и i_copy в бд, если нельзя создать копию сразу на беке.\r\n      ReloadCardList();\r\n  };*/\n  //Удалить шаблон //Сюда надо подкрутить удаление шаблона\n  /*const DeleteShablon =(id)=>{\r\n      console.log(\"delete - \" + id);\r\n        //Это для перезагрузки списка\r\n      var title = document.getElementById(\"InSearch\");\r\n      ReloadCardList(title.value);\r\n  };\r\n  //Копировать ссылку на шаблон - работает\r\n  const CopyLink =(link)=>{\r\n      console.log(link);\r\n      navigator.clipboard.writeText(link);\r\n  };*/\n  //Редактировать шаблон\n  /*const EditShablon =(id)=>{\r\n        setValue((prevState) => []);\r\n        //Получаем структуру из вопросов конкретного шаблона\r\n      //в виде x = [{id: 1, question_type: '', question_text: '', answer: [] }]\r\n        var x = [];\r\n      for(var j=0;j<x.length;j++){\r\n          var newitem = {\r\n              id: x[j].id,\r\n              question_type: x[j].question_type,\r\n              question_text: x[j].question_text,\r\n              answer: x[j].answer\r\n          };\r\n          setValue((prevState) => [...prevState, newitem]);\r\n      }\r\n        let title = document.getElementById('shablon_title');\r\n      title.value=\"Название\";\r\n      let stype = document.getElementById(\"typeselect\");\r\n      stype.value=\"public\";\r\n      let bl2 = document.getElementById('mainp');\r\n      bl2.hidden = false;\r\n  }*/\n\n  //Показать результаты\n  /*const ShowResult =(id)=>{\r\n        const res = [{id: 0, ti: 'Какое ваше любимое мороженное?', re: 'шоколадное'}, \r\n      {id: 1, ti: 'В каком городе вы живете?', re: 'Дубна'}];\r\n      Res_title = \"Тестовое название опроса\";\r\n      var bl = document.getElementById('Res');\r\n      if(vis ===false){\r\n          bl.innerHTML = ReactDOMServer.renderToString(<Result title = {Res_title} res_answ={res}></Result>);\r\n          vis = true;\r\n      }\r\n      else{\r\n          bl.innerHTML = ReactDOMServer.renderToString();\r\n          vis = false;\r\n      }\r\n      \r\n  }*/\n  /*\r\n      return(\r\n          <div id = \"main_block_c\">\r\n              <div id=\"block1\">\r\n                  <MainButtoms \r\n                      NewShablon={NewShablon} \r\n                      List = {shablon_cards}\r\n                      CopyShablon = {CopyShablon}\r\n                      CopyLink = {CopyLink}\r\n                      EditShablon = {EditShablon}\r\n                      DeleteShablon = {DeleteShablon}\r\n                      ReloadList = {ReloadCardList}\r\n                      ShowResult = {ShowResult}\r\n                      >\r\n                  </MainButtoms>\r\n              </div>\r\n              <div id=\"block2\">\r\n                  <div id = 'Res'></div>\r\n                  <div id = 'mainp'>\r\n                      <MainPanel></MainPanel>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      );\r\n          */\n};\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","QPool","MainButtoms","Result","ReactDOMServer","MainPanel","App","Res_title","vis"],"sources":["C:/Users/iliab/Desktop/vkrproject/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QPool from './qpoll';\r\nimport {MainButtoms} from './mainbuttons';\r\nimport { Result } from './Result';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport { MainPanel } from './mainpanel';\r\n\r\n\r\nexport const App = () => {\r\n    var Res_title = '';\r\n    var vis = false;\r\n    /*const [items, setValue] = useState([\r\n        {\r\n            id: 0,\r\n            Item_order: '',\r\n            question_type: '',\r\n            question_text: '',\r\n            answer: []\r\n        }\r\n    ]);*/\r\n\r\n    /*const [shablon_cards, setCard] = useState([\r\n        {\r\n            id: 0,\r\n            title: 'Shablon 1',\r\n            link: 'https://Shablon1',\r\n            data: '01.02.2023'  \r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Shablon 2',\r\n            link: 'https://Shablon2',\r\n            data: '21.05.2023'  \r\n        }\r\n    ]);\r\n    \r\n    //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\r\n    //Работает, но нужно связать с бд\r\n    const ReloadCardList =()=>{\r\n        var title = document.getElementById(\"InSearch\");\r\n        setCard((prevState) => []);\r\n        //Тут надо получить данные из бд и запихнуть их в cards\r\n        //Get date from bd -> cards [{id: , title: , link: , data: }]\r\n        const cards = [{id:3, title: \"Title\", link: \"link\", data: \"02.02.2022\"},\r\n        {id:4, title: \"Title2\", link: \"link\", data: \"02.02.2023\"}]\r\n\r\n        cards.map((card) => {\r\n            addcard(card.id, card.title, card.link, card.data);\r\n        })\r\n    };\r\n    //Работает\r\n    const addcard = (c_id, c_title, c_link, c_data) => {\r\n\r\n        var newcard = {\r\n            id: c_id,\r\n            title: c_title,\r\n            link: c_link,\r\n            data: c_data \r\n        };\r\n        setCard((prevState) => [...prevState, newcard]);\r\n    };*/\r\n\r\n\r\n    //Добавляем вопрос\r\n    /*const additem = () => {\r\n        let i = 0;\r\n        for(var j=0;j<items.length;j++){\r\n            if(items[j].id>i){\r\n                i=items[j].id;\r\n            }\r\n        }\r\n        i++;\r\n        var newitem = {\r\n            id: i,\r\n            Item_order: '',\r\n            question_type: '',\r\n            question_text: '',\r\n            answer: []\r\n        };\r\n        setValue((prevState) => [...prevState, newitem]);\r\n        //Вывод для проверки\r\n        //console.log(i);\r\n    };*/\r\n    //Удаляем вопрос\r\n    /*const deleteitem = (id) =>{\r\n        var count = items.length;\r\n        if(count > 1){\r\n            setValue((prevState) => {\r\n                const idx = prevState.findIndex((item) => item.id === id);\r\n                return[...prevState.slice(0,idx), ...prevState.slice(idx+1)];\r\n            });\r\n            //Для проверки\r\n            count--;\r\n        } \r\n        else{ \r\n            alert('Нельзя удалить единственный вопрос!');\r\n        };\r\n        //Для проверки\r\n        //console.log(count);\r\n    };*/\r\n    //Получаем текст и варианты ответов на вопросы\r\n    /*const SetQuestion = (id, type) =>{\r\n        var qtype = type;\r\n        var qtext ='';\r\n        var qans =[];\r\n        var a, j;\r\n        var inputs = document.getElementsByName('question_area_' + id);\r\n        for (j = 0; j < inputs.length; j++) {\r\n            a = inputs[j];\r\n            qtext = a.value;\r\n        }\r\n        if((qtype !== 'short') || (qtype !== 'long')){\r\n            inputs = document.getElementsByName('answer_area_' + id);\r\n            for (j = 0; j < inputs.length; j++) {\r\n                a = inputs[j];\r\n                qans.push(a.value);\r\n            }\r\n        }\r\n        var copy = Object.assign([], items);\r\n        var idx = copy.findIndex((item) => item.id === id);\r\n        var newitem={\r\n            id: id,\r\n            question_type: qtype,\r\n            question_text: qtext,\r\n            answer: qans\r\n        };\r\n        copy[idx]=newitem;\r\n        setValue(copy);\r\n\r\n        console.log(qtype);\r\n        console.log(qtext);\r\n        console.log(qans);\r\n    };*/\r\n    //Поиск\r\n    //Добавить запись в бд\r\n    /*const SaveShablon = () => {\r\n        var s_title = document.getElementById(\"shablon_title\");//Название шаблона\r\n        var s_type = document.getElementById(\"typeselect\");//Тип шаблона\r\n        //Данные о вопросах шаблона беруться из items, ниже цикл для перебора элементов элементов\r\n        var items_copy = Object.assign([], items);\r\n        for(var i = 0; i<items_copy.length; i++){\r\n            items_copy[i].id\r\n            items_copy[i].question_type\r\n            items_copy[i].question_text\r\n            items_copy[i].answer\r\n        }\r\n        console.log(s_title.value);\r\n        console.log(s_type.value);\r\n        console.log(items);\r\n    };*/\r\n    //Новый шаблон-очистить поле создания шаблона+\r\n    /*const NewShablon =()=>{\r\n        let new_list = [{\r\n            id: 0,\r\n            Item_order: '',\r\n            question_type: '',\r\n            question_text: '',\r\n            answer: []        \r\n        }];\r\n        setValue((prevState) => new_list);\r\n        let title = document.getElementById('shablon_title');\r\n        title.value=\"\";\r\n        let stype = document.getElementById(\"typeselect\");\r\n        stype.value=\"public\";\r\n        let mp = document.getElementById('mainp');\r\n        mp.innerHTML = ReactDOMServer.renderToString(<MainPanel></MainPanel>);\r\n    };*/\r\n    //Копировать шаблон\r\n    /*const CopyShablon =(id)=>{\r\n        var s_copy = Object.assign([], shablon_cards);\r\n        var i_copy = [];\r\n        var new_shablon;\r\n        for(var i = 0; i<s_copy.length; i++){\r\n            if(s_copy[i].id === id){\r\n                new_shablon = {\r\n                    id: s_copy[i].id,\r\n                    title: s_copy[i].title,\r\n                    link: s_copy[i].link,\r\n                    data: s_copy[i].data,\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        console.log(new_shablon);\r\n        //Здесь надо получить записи о вопросах данного шаблона\r\n        //из бд и запихнуть их в i_copy, после чего записать\r\n        //данные из new_shablon и i_copy в бд, если нельзя создать копию сразу на беке.\r\n        ReloadCardList();\r\n    };*/\r\n    //Удалить шаблон //Сюда надо подкрутить удаление шаблона\r\n    /*const DeleteShablon =(id)=>{\r\n        console.log(\"delete - \" + id);\r\n\r\n        //Это для перезагрузки списка\r\n        var title = document.getElementById(\"InSearch\");\r\n        ReloadCardList(title.value);\r\n    };\r\n    //Копировать ссылку на шаблон - работает\r\n    const CopyLink =(link)=>{\r\n        console.log(link);\r\n        navigator.clipboard.writeText(link);\r\n    };*/\r\n    //Редактировать шаблон\r\n    /*const EditShablon =(id)=>{\r\n\r\n        setValue((prevState) => []);\r\n\r\n        //Получаем структуру из вопросов конкретного шаблона\r\n        //в виде x = [{id: 1, question_type: '', question_text: '', answer: [] }]\r\n\r\n        var x = [];\r\n        for(var j=0;j<x.length;j++){\r\n            var newitem = {\r\n                id: x[j].id,\r\n                question_type: x[j].question_type,\r\n                question_text: x[j].question_text,\r\n                answer: x[j].answer\r\n            };\r\n            setValue((prevState) => [...prevState, newitem]);\r\n        }\r\n\r\n        let title = document.getElementById('shablon_title');\r\n        title.value=\"Название\";\r\n        let stype = document.getElementById(\"typeselect\");\r\n        stype.value=\"public\";\r\n        let bl2 = document.getElementById('mainp');\r\n        bl2.hidden = false;\r\n    }*/\r\n\r\n    //Показать результаты\r\n    /*const ShowResult =(id)=>{\r\n\r\n        const res = [{id: 0, ti: 'Какое ваше любимое мороженное?', re: 'шоколадное'}, \r\n        {id: 1, ti: 'В каком городе вы живете?', re: 'Дубна'}];\r\n        Res_title = \"Тестовое название опроса\";\r\n        var bl = document.getElementById('Res');\r\n        if(vis ===false){\r\n            bl.innerHTML = ReactDOMServer.renderToString(<Result title = {Res_title} res_answ={res}></Result>);\r\n            vis = true;\r\n        }\r\n        else{\r\n            bl.innerHTML = ReactDOMServer.renderToString();\r\n            vis = false;\r\n        }\r\n        \r\n    }*/\r\n/*\r\n    return(\r\n        <div id = \"main_block_c\">\r\n            <div id=\"block1\">\r\n                <MainButtoms \r\n                    NewShablon={NewShablon} \r\n                    List = {shablon_cards}\r\n                    CopyShablon = {CopyShablon}\r\n                    CopyLink = {CopyLink}\r\n                    EditShablon = {EditShablon}\r\n                    DeleteShablon = {DeleteShablon}\r\n                    ReloadList = {ReloadCardList}\r\n                    ShowResult = {ShowResult}\r\n                    >\r\n                </MainButtoms>\r\n            </div>\r\n            <div id=\"block2\">\r\n                <div id = 'Res'></div>\r\n                <div id = 'mainp'>\r\n                    <MainPanel></MainPanel>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n        */\r\n};"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAAQC,WAAW,QAAO,eAAe;AACzC,SAASC,MAAM,QAAQ,UAAU;AACjC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,SAAS,QAAQ,aAAa;AAGvC,OAAO,MAAMC,GAAG,GAAG,MAAM;EACrB,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIC,GAAG,GAAG,KAAK;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAMI;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC,KAvQWF,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}