{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iliab\\\\Desktop\\\\vkrproject\\\\src\\\\components\\\\mainbuttons.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ShablonCard } from './shabloncard';\nimport { SearchShablon } from './search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainButtoms = () => {\n  _s();\n  const [shablon_cards, setCard] = useState([{\n    id: 0,\n    title: 'Shablon 1',\n    link: 'https://Shablon1',\n    data: '01.02.2023'\n  }, {\n    id: 1,\n    title: 'Shablon 2',\n    link: 'https://Shablon2',\n    data: '21.05.2023'\n  }]);\n\n  //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\n  //Работает, но нужно связать с бд\n  const ReloadCardList = () => {\n    var title = document.getElementById(\"InSearch\");\n    setCard(prevState => []);\n    //Тут надо получить данные из бд и запихнуть их в cards\n    //Get date from bd -> cards [{id: , title: , link: , data: }]\n    const cards = [{\n      id: 3,\n      title: \"Title\",\n      link: \"link\",\n      data: \"02.02.2022\"\n    }, {\n      id: 4,\n      title: \"Title2\",\n      link: \"link\",\n      data: \"02.02.2023\"\n    }];\n    cards.map(card => {\n      addcard(card.id, card.title, card.link, card.data);\n    });\n  };\n  //Работает\n  const addcard = (c_id, c_title, c_link, c_data) => {\n    var newcard = {\n      id: c_id,\n      title: c_title,\n      link: c_link,\n      data: c_data\n    };\n    setCard(prevState => [...prevState, newcard]);\n  };\n\n  //Копировать шаблон\n  const CopyShablon = id => {\n    var s_copy = Object.assign([], shablon_cards);\n    var i_copy = [];\n    var new_shablon;\n    for (var i = 0; i < s_copy.length; i++) {\n      if (s_copy[i].id === id) {\n        new_shablon = {\n          id: s_copy[i].id,\n          title: s_copy[i].title,\n          link: s_copy[i].link,\n          data: s_copy[i].data\n        };\n        break;\n      }\n    }\n    console.log(new_shablon);\n    //Здесь надо получить записи о вопросах данного шаблона\n    //из бд и запихнуть их в i_copy, после чего записать\n    //данные из new_shablon и i_copy в бд, если нельзя создать копию сразу на беке.\n    ReloadCardList();\n  };\n  //Удалить шаблон //Сюда надо подкрутить удаление шаблона\n  const DeleteShablon = id => {\n    console.log(\"delete - \" + id);\n\n    //Это для перезагрузки списка\n    var title = document.getElementById(\"InSearch\");\n    ReloadCardList(title.value);\n  };\n  //Копировать ссылку на шаблон - работает\n  const CopyLink = link => {\n    console.log(link);\n    navigator.clipboard.writeText(link);\n  };\n  //Редактировать шаблон\n  const EditShablon = id => {\n    /*setValue((prevState) => []);\r\n      //Получаем структуру из вопросов конкретного шаблона\r\n    //в виде x = [{id: 1, question_type: '', question_text: '', answer: [] }]\r\n      var x = [];\r\n    for(var j=0;j<x.length;j++){\r\n        var newitem = {\r\n            id: x[j].id,\r\n            question_type: x[j].question_type,\r\n            question_text: x[j].question_text,\r\n            answer: x[j].answer\r\n        };\r\n        setValue((prevState) => [...prevState, newitem]);\r\n    }\r\n      let title = document.getElementById('shablon_title');\r\n    title.value=\"Название\";\r\n    let stype = document.getElementById(\"typeselect\");\r\n    stype.value=\"public\";*/\n    let bl2 = document.getElementById('mainp');\n    bl2.hidden = false;\n  };\n  //Показать результаты\n  const ShowResult = id => {};\n  const items = shablon_cards.map(lst => /*#__PURE__*/_jsxDEV(ShablonCard, {\n    cardtitle: lst.title,\n    carddate: lst.data,\n    link: lst.link,\n    id: lst.id,\n    CopyShablon: CopyShablon,\n    CopyLink: CopyLink,\n    EditShablon: EditShablon,\n    DeleteShablon: DeleteShablon,\n    ShowResult: ShowResult\n  }, lst.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 13\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menucontrol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groupbtn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"shablonlist\",\n      children: [/*#__PURE__*/_jsxDEV(SearchShablon, {\n        ReloadList: ReloadCardList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), items]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 13\n  }, this);\n};\n_s(MainButtoms, \"8Yd51HuiKTGoSo3iPZ9QBOuv/So=\");\n_c = MainButtoms;\nvar _c;\n$RefreshReg$(_c, \"MainButtoms\");","map":{"version":3,"names":["React","useState","ShablonCard","SearchShablon","MainButtoms","shablon_cards","setCard","id","title","link","data","ReloadCardList","document","getElementById","prevState","cards","map","card","addcard","c_id","c_title","c_link","c_data","newcard","CopyShablon","s_copy","Object","assign","i_copy","new_shablon","i","length","console","log","DeleteShablon","value","CopyLink","navigator","clipboard","writeText","EditShablon","bl2","hidden","ShowResult","items","lst"],"sources":["C:/Users/iliab/Desktop/vkrproject/src/components/mainbuttons.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { ShablonCard } from './shabloncard';\r\nimport {SearchShablon} from './search';\r\n\r\nexport const MainButtoms = () =>{\r\n\r\n    const [shablon_cards, setCard] = useState([\r\n        {\r\n            id: 0,\r\n            title: 'Shablon 1',\r\n            link: 'https://Shablon1',\r\n            data: '01.02.2023'  \r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Shablon 2',\r\n            link: 'https://Shablon2',\r\n            data: '21.05.2023'  \r\n        }\r\n    ]);\r\n    \r\n    //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\r\n    //Работает, но нужно связать с бд\r\n    const ReloadCardList =()=>{\r\n        var title = document.getElementById(\"InSearch\");\r\n        setCard((prevState) => []);\r\n        //Тут надо получить данные из бд и запихнуть их в cards\r\n        //Get date from bd -> cards [{id: , title: , link: , data: }]\r\n        const cards = [{id:3, title: \"Title\", link: \"link\", data: \"02.02.2022\"},\r\n        {id:4, title: \"Title2\", link: \"link\", data: \"02.02.2023\"}]\r\n\r\n        cards.map((card) => {\r\n            addcard(card.id, card.title, card.link, card.data);\r\n        })\r\n    };\r\n    //Работает\r\n    const addcard = (c_id, c_title, c_link, c_data) => {\r\n\r\n        var newcard = {\r\n            id: c_id,\r\n            title: c_title,\r\n            link: c_link,\r\n            data: c_data \r\n        };\r\n        setCard((prevState) => [...prevState, newcard]);\r\n    };\r\n\r\n        //Копировать шаблон\r\n        const CopyShablon =(id)=>{\r\n            var s_copy = Object.assign([], shablon_cards);\r\n            var i_copy = [];\r\n            var new_shablon;\r\n            for(var i = 0; i<s_copy.length; i++){\r\n                if(s_copy[i].id === id){\r\n                    new_shablon = {\r\n                        id: s_copy[i].id,\r\n                        title: s_copy[i].title,\r\n                        link: s_copy[i].link,\r\n                        data: s_copy[i].data,\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            console.log(new_shablon);\r\n            //Здесь надо получить записи о вопросах данного шаблона\r\n            //из бд и запихнуть их в i_copy, после чего записать\r\n            //данные из new_shablon и i_copy в бд, если нельзя создать копию сразу на беке.\r\n            ReloadCardList();\r\n        };\r\n    //Удалить шаблон //Сюда надо подкрутить удаление шаблона\r\n    const DeleteShablon =(id)=>{\r\n        console.log(\"delete - \" + id);\r\n\r\n        //Это для перезагрузки списка\r\n        var title = document.getElementById(\"InSearch\");\r\n        ReloadCardList(title.value);\r\n    };\r\n    //Копировать ссылку на шаблон - работает\r\n    const CopyLink =(link)=>{\r\n        console.log(link);\r\n        navigator.clipboard.writeText(link);\r\n    };\r\n    //Редактировать шаблон\r\n    const EditShablon =(id)=>{\r\n\r\n        /*setValue((prevState) => []);\r\n\r\n        //Получаем структуру из вопросов конкретного шаблона\r\n        //в виде x = [{id: 1, question_type: '', question_text: '', answer: [] }]\r\n\r\n        var x = [];\r\n        for(var j=0;j<x.length;j++){\r\n            var newitem = {\r\n                id: x[j].id,\r\n                question_type: x[j].question_type,\r\n                question_text: x[j].question_text,\r\n                answer: x[j].answer\r\n            };\r\n            setValue((prevState) => [...prevState, newitem]);\r\n        }\r\n\r\n        let title = document.getElementById('shablon_title');\r\n        title.value=\"Название\";\r\n        let stype = document.getElementById(\"typeselect\");\r\n        stype.value=\"public\";*/\r\n        let bl2 = document.getElementById('mainp');\r\n        bl2.hidden = false;\r\n    }\r\n        //Показать результаты\r\n        const ShowResult =(id)=>{\r\n            \r\n        }\r\n\r\n\r\n        const items = shablon_cards.map((lst) =>\r\n            <ShablonCard cardtitle={lst.title}\r\n                carddate={lst.data} \r\n                key={lst.id}\r\n                link={lst.link}\r\n                id={lst.id}\r\n                CopyShablon = {CopyShablon}\r\n                CopyLink = {CopyLink}\r\n                EditShablon = {EditShablon}\r\n                DeleteShablon = {DeleteShablon}\r\n                ShowResult = {ShowResult}\r\n            />\r\n        );\r\n\r\n        return(\r\n            <div className=\"menucontrol\">\r\n                <div className = \"groupbtn\">\r\n                </div>\r\n                <div className=\"shablonlist\">\r\n                    <SearchShablon ReloadList={ReloadCardList}/>\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}