{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iliab\\\\Desktop\\\\vkrproject\\\\src\\\\components\\\\mainbuttons.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ShablonCard } from './shabloncard';\nimport { SearchShablon } from './search';\nimport axios from 'axios';\nimport { Container, FormControl, Nav, Navbar } from 'react-bootstrap';\nimport { Result } from './Result';\nimport ReactDOMServer from 'react-dom/server';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const MainButtoms = () => {\n  _s();\n  var vis = false;\n  const [shablon_cards, setCard] = useState([{\n    id: 0,\n    title: 'Shablon 1',\n    link: 'https://Shablon1',\n    data: '01.02.2023'\n  }, {\n    id: 1,\n    title: 'Shablon 2',\n    link: 'https://Shablon2',\n    data: '21.05.2023'\n  }]);\n\n  //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\n  const ReloadCardList = () => {\n    var title = document.getElementById(\"InSearch\");\n    setCard(prevState => []);\n    const cards = [];\n    axios.get('http://').then(res => {\n      res.map(r => {\n        cards.push({\n          id: r.id,\n          title: r.title,\n          link: r.link,\n          data: r.data\n        });\n      });\n    });\n    cards.map(card => {\n      addcard(card.id, card.title, card.link, card.data);\n    });\n  };\n  const addcard = (c_id, c_title, c_link, c_data) => {\n    var newcard = {\n      id: c_id,\n      title: c_title,\n      link: c_link,\n      data: c_data\n    };\n    setCard(prevState => [...prevState, newcard]);\n  };\n\n  //Копировать шаблон\n  const CopyShablon = id => {\n    ReloadCardList();\n  };\n\n  //Удалить шаблон //Сюда надо подкрутить удаление шаблона\n  const DeleteShablon = id => {\n    console.log(\"delete - \" + id);\n\n    //Это для перезагрузки списка\n    var title = document.getElementById(\"InSearch\");\n    ReloadCardList(title.value);\n  };\n\n  //Копировать ссылку на шаблон - работает\n  const CopyLink = link => {\n    console.log(link);\n    navigator.clipboard.writeText(link);\n  };\n\n  //Редактировать шаблон\n  const EditShablon = id => {};\n\n  //Показать результаты\n  const ShowResult = id => {\n    const res = [{\n      id: 0,\n      ti: 'Какое ваше любимое мороженное?',\n      re: 'шоколадное'\n    }, {\n      id: 1,\n      ti: 'В каком городе вы живете?',\n      re: 'Дубна'\n    }];\n    const Res_title = \"Тестовое название опроса\";\n    var bl = document.getElementById('res');\n    if (vis === false) {\n      bl.innerHTML = ReactDOMServer.renderToString( /*#__PURE__*/_jsxDEV(Result, {\n        title: Res_title,\n        res_answ: res\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 58\n      }, this));\n      vis = true;\n    } else {\n      bl.innerHTML = ReactDOMServer.renderToString();\n      vis = false;\n    }\n  };\n  const items = shablon_cards.map(lst => /*#__PURE__*/_jsxDEV(ShablonCard, {\n    cardtitle: lst.title,\n    carddate: lst.data,\n    link: lst.link,\n    id: lst.id,\n    CopyShablon: CopyShablon,\n    CopyLink: CopyLink,\n    EditShablon: EditShablon,\n    DeleteShablon: DeleteShablon,\n    ShowResult: ShowResult\n  }, lst.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 13\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menucontrol\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shablonlist\",\n        children: [/*#__PURE__*/_jsxDEV(SearchShablon, {\n          ReloadList: ReloadCardList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), items]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"res\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(MainButtoms, \"8Yd51HuiKTGoSo3iPZ9QBOuv/So=\");\n_c = MainButtoms;\nvar _c;\n$RefreshReg$(_c, \"MainButtoms\");","map":{"version":3,"names":["React","useState","useEffect","ShablonCard","SearchShablon","axios","Container","FormControl","Nav","Navbar","Result","ReactDOMServer","MainButtoms","vis","shablon_cards","setCard","id","title","link","data","ReloadCardList","document","getElementById","prevState","cards","get","then","res","map","r","push","card","addcard","c_id","c_title","c_link","c_data","newcard","CopyShablon","DeleteShablon","console","log","value","CopyLink","navigator","clipboard","writeText","EditShablon","ShowResult","ti","re","Res_title","bl","innerHTML","renderToString","items","lst"],"sources":["C:/Users/iliab/Desktop/vkrproject/src/components/mainbuttons.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ShablonCard } from './shabloncard';\r\nimport {SearchShablon} from './search';\r\nimport axios from 'axios';\r\nimport { Container, FormControl, Nav, Navbar } from 'react-bootstrap';\r\nimport { Result } from './Result';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nexport const MainButtoms = () =>{\r\n\r\n    var vis = false;\r\n\r\n    const [shablon_cards, setCard] = useState([\r\n        {\r\n            id: 0,\r\n            title: 'Shablon 1',\r\n            link: 'https://Shablon1',\r\n            data: '01.02.2023'  \r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Shablon 2',\r\n            link: 'https://Shablon2',\r\n            data: '21.05.2023'  \r\n        }\r\n    ]);\r\n    \r\n    //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\r\n    const ReloadCardList =()=>{\r\n        var title = document.getElementById(\"InSearch\");\r\n        setCard((prevState) => []);\r\n\r\n        const cards = [];\r\n\r\n        axios.get('http://').then((res) => {\r\n            res.map((r) => {\r\n                cards.push({id:r.id, title: r.title, link: r.link, data: r.data})\r\n            })\r\n        })\r\n\r\n        cards.map((card) => {\r\n            addcard(card.id, card.title, card.link, card.data);\r\n        })\r\n    };\r\n\r\n    const addcard = (c_id, c_title, c_link, c_data) => {\r\n\r\n        var newcard = {\r\n            id: c_id,\r\n            title: c_title,\r\n            link: c_link,\r\n            data: c_data \r\n        };\r\n        setCard((prevState) => [...prevState, newcard]);\r\n    };\r\n\r\n    //Копировать шаблон\r\n    const CopyShablon =(id)=>{\r\n        ReloadCardList();\r\n    };\r\n\r\n    //Удалить шаблон //Сюда надо подкрутить удаление шаблона\r\n    const DeleteShablon =(id)=>{\r\n        console.log(\"delete - \" + id);\r\n\r\n        //Это для перезагрузки списка\r\n        var title = document.getElementById(\"InSearch\");\r\n        ReloadCardList(title.value);\r\n    };\r\n\r\n    //Копировать ссылку на шаблон - работает\r\n    const CopyLink =(link)=>{\r\n        console.log(link);\r\n        navigator.clipboard.writeText(link);\r\n    };\r\n\r\n    //Редактировать шаблон\r\n    const EditShablon =(id)=>{\r\n\r\n    }\r\n\r\n    //Показать результаты\r\n    const ShowResult =(id)=>{     \r\n        \r\n        const res = [{id: 0, ti: 'Какое ваше любимое мороженное?', re: 'шоколадное'}, \r\n        {id: 1, ti: 'В каком городе вы живете?', re: 'Дубна'}];\r\n\r\n        const Res_title = \"Тестовое название опроса\";\r\n\r\n        var bl = document.getElementById('res');\r\n        if(vis ===false){\r\n            bl.innerHTML = ReactDOMServer.renderToString(<Result title = {Res_title} res_answ={res}></Result>);\r\n            vis = true;\r\n        }\r\n        else{\r\n            bl.innerHTML = ReactDOMServer.renderToString();\r\n            vis = false;\r\n        }\r\n    }\r\n\r\n\r\n        const items = shablon_cards.map((lst) =>\r\n            <ShablonCard cardtitle={lst.title}\r\n                carddate={lst.data} \r\n                key={lst.id}\r\n                link={lst.link}\r\n                id={lst.id}\r\n                CopyShablon = {CopyShablon}\r\n                CopyLink = {CopyLink}\r\n                EditShablon = {EditShablon}\r\n                DeleteShablon = {DeleteShablon}\r\n                ShowResult = {ShowResult}\r\n            />\r\n        );\r\n\r\n        return(\r\n            <>\r\n            <div className=\"menucontrol\">\r\n                <div className=\"shablonlist\">\r\n                    <SearchShablon ReloadList={ReloadCardList}/>\r\n                    {items}\r\n                </div>\r\n            </div>\r\n            <div id = 'res'></div>\r\n            </>\r\n        )\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}