{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iliab\\\\Desktop\\\\vkrproject\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QPool from './qpoll';\nimport { MainButtoms } from './mainbuttons';\nimport { Result } from './Result';\nimport ReactDOMServer from 'react-dom/server';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n  const [items, setValue] = useState([{\n    id: 0,\n    question_type: 'short',\n    question_text: 'sad',\n    answer: []\n  }, {\n    id: 1,\n    question_type: 'long',\n    question_text: 'szxczxcxc',\n    answer: []\n  }, {\n    id: 2,\n    question_type: 'one',\n    question_text: 'qwe',\n    answer: ['1', '2', '3']\n  }, {\n    id: 3,\n    question_type: 'many',\n    question_text: 'llkjl',\n    answer: ['1', '2', '3', '4']\n  }]);\n  const [shablon_cards, setCard] = useState([{\n    id: 0,\n    title: 'Shablon 1',\n    link: 'https://Shablon1',\n    data: '01.02.2023'\n  }, {\n    id: 1,\n    title: 'Shablon 2',\n    link: 'https://Shablon2',\n    data: '21.05.2023'\n  }]);\n\n  //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\n  //Работает, но нужно связать с бд\n  const ReloadCardList = () => {\n    var title = document.getElementById(\"InSearch\");\n    setCard(prevState => []);\n    //Тут надо получить данные из бд и запихнуть их в cards\n    //Get date from bd -> cards [{id: , title: , link: , data: }]\n    const cards = [{\n      id: 3,\n      title: \"Title\",\n      link: \"link\",\n      data: \"02.02.2022\"\n    }, {\n      id: 4,\n      title: \"Title2\",\n      link: \"link\",\n      data: \"02.02.2023\"\n    }];\n    cards.map(card => {\n      addcard(card.id, card.title, card.link, card.data);\n    });\n  };\n  //Работает\n  const addcard = (c_id, c_title, c_link, c_data) => {\n    var newcard = {\n      id: c_id,\n      title: c_title,\n      link: c_link,\n      data: c_data\n    };\n    setCard(prevState => [...prevState, newcard]);\n  };\n\n  //Добавляем вопрос\n  const additem = () => {\n    let i = 0;\n    for (var j = 0; j < items.length; j++) {\n      if (items[j].id > i) {\n        i = items[j].id;\n      }\n    }\n    i++;\n    var newitem = {\n      id: i,\n      question_type: '',\n      question_text: '',\n      answer: []\n    };\n    setValue(prevState => [...prevState, newitem]);\n    //Вывод для проверки\n    //console.log(i);\n  };\n  //Удаляем вопрос\n  const deleteitem = id => {\n    var count = items.length;\n    if (count > 1) {\n      setValue(prevState => {\n        const idx = prevState.findIndex(item => item.id === id);\n        return [...prevState.slice(0, idx), ...prevState.slice(idx + 1)];\n      });\n      //Для проверки\n      count--;\n    } else {\n      alert('Нельзя удалить единственный вопрос!');\n    }\n    ;\n    //Для проверки\n    //console.log(count);\n  };\n  //Получаем текст и варианты ответов на вопросы\n  const SetQuestion = (id, type) => {\n    var qtype = type;\n    var qtext = '';\n    var qans = [];\n    var a, j;\n    var inputs = document.getElementsByName('question_area_' + id);\n    for (j = 0; j < inputs.length; j++) {\n      a = inputs[j];\n      qtext = a.value;\n    }\n    if (qtype !== 'short' || qtype !== 'long') {\n      inputs = document.getElementsByName('answer_area_' + id);\n      for (j = 0; j < inputs.length; j++) {\n        a = inputs[j];\n        qans.push(a.value);\n      }\n    }\n    var copy = Object.assign([], items);\n    var idx = copy.findIndex(item => item.id === id);\n    var newitem = {\n      id: id,\n      question_type: qtype,\n      question_text: qtext,\n      answer: qans\n    };\n    copy[idx] = newitem;\n    setValue(copy);\n\n    /*console.log(qtype);\r\n    console.log(qtext);\r\n    console.log(qans);*/\n  };\n  //Поиск\n  //Добавить запись в бд\n  const SaveShablon = () => {\n    var S_title = document.getElementsByName(\"Shablon_title\").value; //Название шаблона\n    var S_type = document.getElementsByName(\"shablontype\").value; //Тип шаблона\n    //Данные о вопросах шаблона беруться из items, ниже цикл для перебора элементов элементов\n    var items_copy = Object.assign([], items);\n    for (var i = 0; i < items_copy.length; i++) {\n      /*items_copy[i].id\r\n      items_copy[i].question_type\r\n      items_copy[i].question_text\r\n      items_copy[i].answer*/\n    }\n    console.log(items);\n  };\n  //Новый шаблон-очистить поле создания шаблона+\n  const NewShablon = () => {\n    setValue(prevState => []);\n    let title = document.getElementById('shablon_title');\n    title.value = \"\";\n    let stype = document.getElementById(\"typeselect\");\n    stype.value = \"public\";\n  };\n  //Копировать шаблон\n  const CopyShablon = id => {\n    var s_copy = Object.assign([], shablon_cards);\n    var i_copy = [];\n    var new_shablon;\n    for (var i = 0; i < s_copy.length; i++) {\n      if (s_copy[i].id === id) {\n        new_shablon = {\n          id: s_copy[i].id,\n          title: s_copy[i].title,\n          link: s_copy[i].link,\n          data: s_copy[i].data\n        };\n        break;\n      }\n    }\n    console.log(new_shablon);\n    //Здесь надо получить записи о вопросах данного шаблона\n    //из бд и запихнуть их в i_copy, после чего записать\n    //данные из new_shablon и i_copy в бд, если нельзя создать копию сразу на беке.\n    ReloadCardList();\n  };\n  //Удалить шаблон //Сюда надо подкрутить удаление шаблона\n  const DeleteShablon = id => {\n    console.log(\"delete - \" + id);\n\n    //Это для перезагрузки списка\n    var title = document.getElementById(\"InSearch\");\n    ReloadCardList(title.value);\n  };\n  //Копировать ссылку на шаблон - работает\n  const CopyLink = link => {\n    console.log(link);\n    navigator.clipboard.writeText(link);\n  };\n  //Редактировать шаблон\n  const EditShablon = id => {\n    setValue(prevState => []);\n\n    //Получаем структуру из вопросов конкретного шаблона\n    //в виде x = [{id: 1, question_type: '', question_text: '', answer: [] }]\n\n    var x = [];\n    for (var j = 0; j < x.length; j++) {\n      var newitem = {\n        id: x[j].id,\n        question_type: x[j].question_type,\n        question_text: x[j].question_text,\n        answer: x[j].answer\n      };\n      setValue(prevState => [...prevState, newitem]);\n    }\n    let title = document.getElementById('shablon_title');\n    title.value = \"Название\";\n    let stype = document.getElementById(\"typeselect\");\n    stype.value = \"public\";\n  };\n\n  //Показать результаты\n  const ShowResult = id => {\n    const res = [{\n      id: 0,\n      title: 'Title1',\n      reuls: 'res1'\n    }, {\n      id: 1,\n      title: 'Title2',\n      reuls: 'res2'\n    }];\n    console.log(\"res\");\n    var zxc = document.getElementById('mainp');\n    zxc.innerHTML = ReactDOMServer.renderToString( /*#__PURE__*/_jsxDEV(Result, {\n      res_answ: res\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 56\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main_block_c\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"block1\",\n      children: /*#__PURE__*/_jsxDEV(MainButtoms, {\n        NewShablon: NewShablon,\n        List: shablon_cards,\n        CopyShablon: CopyShablon,\n        CopyLink: CopyLink,\n        EditShablon: EditShablon,\n        DeleteShablon: DeleteShablon,\n        ReloadList: ReloadCardList,\n        ShowResult: ShowResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"block2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainp\",\n        id: \"mainp\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"shablon_title\",\n          name: \"Shablon_title\",\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u0422\\u0438\\u043F \\u043E\\u043F\\u0440\\u043E\\u0441\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"typeselect\",\n          name: \"shablontype\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"public\",\n            children: \"\\u041F\\u0443\\u0431\\u043B\\u0438\\u0447\\u043D\\u044B\\u0439\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"anon\",\n            children: \"\\u0410\\u043D\\u043E\\u043D\\u0438\\u043C\\u043D\\u044B\\u0439\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), items.map(item => {\n          return /*#__PURE__*/_jsxDEV(QPool, {\n            id: item.id,\n            type: item.question_type,\n            text: item.question_text,\n            answ: item.answer,\n            image_delete: require('../images/close.png'),\n            onDeleted: deleteitem,\n            setInfo: SetQuestion\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 37\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"addtask\",\n          onClick: additem,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: require('../images/plus.png'),\n            alt: \"add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"addtask\",\n          onClick: SaveShablon,\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"dTXNqgZj+39mCVC7Y2ImAl49kyY=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","QPool","MainButtoms","Result","ReactDOMServer","App","items","setValue","id","question_type","question_text","answer","shablon_cards","setCard","title","link","data","ReloadCardList","document","getElementById","prevState","cards","map","card","addcard","c_id","c_title","c_link","c_data","newcard","additem","i","j","length","newitem","deleteitem","count","idx","findIndex","item","slice","alert","SetQuestion","type","qtype","qtext","qans","a","inputs","getElementsByName","value","push","copy","Object","assign","SaveShablon","S_title","S_type","items_copy","console","log","NewShablon","stype","CopyShablon","s_copy","i_copy","new_shablon","DeleteShablon","CopyLink","navigator","clipboard","writeText","EditShablon","x","ShowResult","res","reuls","zxc","innerHTML","renderToString","require"],"sources":["C:/Users/iliab/Desktop/vkrproject/src/components/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QPool from './qpoll';\r\nimport {MainButtoms} from './mainbuttons';\r\nimport { Result } from './Result';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\n\r\nexport const App = () => {\r\n\r\n    const [items, setValue] = useState([\r\n        {\r\n            id: 0,\r\n            question_type: 'short',\r\n            question_text: 'sad',\r\n            answer: []        \r\n        },\r\n        {\r\n            id: 1,\r\n            question_type: 'long',\r\n            question_text: 'szxczxcxc',\r\n            answer: []        \r\n        },\r\n        {\r\n            id: 2,\r\n            question_type: 'one',\r\n            question_text: 'qwe',\r\n            answer: ['1', '2', '3']        \r\n        },\r\n        {\r\n            id: 3,\r\n            question_type: 'many',\r\n            question_text: 'llkjl',\r\n            answer: ['1', '2', '3', '4']        \r\n        }\r\n    ]);\r\n\r\n    const  [shablon_cards, setCard] = useState([\r\n        {\r\n            id: 0,\r\n            title: 'Shablon 1',\r\n            link: 'https://Shablon1',\r\n            data: '01.02.2023'  \r\n        },\r\n        {\r\n            id: 1,\r\n            title: 'Shablon 2',\r\n            link: 'https://Shablon2',\r\n            data: '21.05.2023'  \r\n        }\r\n    ]);\r\n    \r\n    //Метод для поиска шаблонов по совпадению с поисковой строкой и обновления списка\r\n    //Работает, но нужно связать с бд\r\n    const ReloadCardList =()=>{\r\n        var title = document.getElementById(\"InSearch\");\r\n        setCard((prevState) => []);\r\n        //Тут надо получить данные из бд и запихнуть их в cards\r\n        //Get date from bd -> cards [{id: , title: , link: , data: }]\r\n        const cards = [{id:3, title: \"Title\", link: \"link\", data: \"02.02.2022\"},\r\n        {id:4, title: \"Title2\", link: \"link\", data: \"02.02.2023\"}]\r\n\r\n        cards.map((card) => {\r\n            addcard(card.id, card.title, card.link, card.data);\r\n        })\r\n    };\r\n    //Работает\r\n    const addcard = (c_id, c_title, c_link, c_data) => {\r\n\r\n        var newcard = {\r\n            id: c_id,\r\n            title: c_title,\r\n            link: c_link,\r\n            data: c_data \r\n        };\r\n        setCard((prevState) => [...prevState, newcard]);\r\n    };\r\n\r\n\r\n    //Добавляем вопрос\r\n    const additem = () => {\r\n        let i = 0;\r\n        for(var j=0;j<items.length;j++){\r\n            if(items[j].id>i){\r\n                i=items[j].id;\r\n            }\r\n        }\r\n        i++;\r\n        var newitem = {\r\n            id: i,\r\n            question_type: '',\r\n            question_text: '',\r\n            answer: []\r\n        };\r\n        setValue((prevState) => [...prevState, newitem]);\r\n        //Вывод для проверки\r\n        //console.log(i);\r\n    };\r\n    //Удаляем вопрос\r\n    const deleteitem = (id) =>{\r\n        var count = items.length;\r\n        if(count > 1){\r\n            setValue((prevState) => {\r\n                const idx = prevState.findIndex((item) => item.id === id);\r\n                return[...prevState.slice(0,idx), ...prevState.slice(idx+1)];\r\n            });\r\n            //Для проверки\r\n            count--;\r\n        } \r\n        else{ \r\n            alert('Нельзя удалить единственный вопрос!');\r\n        };\r\n        //Для проверки\r\n        //console.log(count);\r\n    };\r\n    //Получаем текст и варианты ответов на вопросы\r\n    const SetQuestion = (id, type) =>{\r\n        var qtype = type;\r\n        var qtext ='';\r\n        var qans =[];\r\n        var a, j;\r\n        var inputs = document.getElementsByName('question_area_' + id);\r\n        for (j = 0; j < inputs.length; j++) {\r\n            a = inputs[j];\r\n            qtext = a.value;\r\n        }\r\n        if((qtype !== 'short') || (qtype !== 'long')){\r\n            inputs = document.getElementsByName('answer_area_' + id);\r\n            for (j = 0; j < inputs.length; j++) {\r\n                a = inputs[j];\r\n                qans.push(a.value);\r\n            }\r\n        }\r\n        var copy = Object.assign([], items);\r\n        var idx = copy.findIndex((item) => item.id === id);\r\n        var newitem={\r\n            id: id,\r\n            question_type: qtype,\r\n            question_text: qtext,\r\n            answer: qans\r\n        };\r\n        copy[idx]=newitem;\r\n        setValue(copy);\r\n\r\n        /*console.log(qtype);\r\n        console.log(qtext);\r\n        console.log(qans);*/\r\n    };\r\n    //Поиск\r\n    //Добавить запись в бд\r\n    const SaveShablon = () => {\r\n        var S_title = document.getElementsByName(\"Shablon_title\").value;//Название шаблона\r\n        var S_type = document.getElementsByName(\"shablontype\").value;//Тип шаблона\r\n        //Данные о вопросах шаблона беруться из items, ниже цикл для перебора элементов элементов\r\n        var items_copy = Object.assign([], items);\r\n        for(var i = 0; i<items_copy.length; i++){\r\n            /*items_copy[i].id\r\n            items_copy[i].question_type\r\n            items_copy[i].question_text\r\n            items_copy[i].answer*/\r\n        }\r\n        console.log(items);\r\n    };\r\n    //Новый шаблон-очистить поле создания шаблона+\r\n    const NewShablon =()=>{\r\n\r\n        setValue((prevState) => []);\r\n        let title = document.getElementById('shablon_title');\r\n        title.value=\"\";\r\n        let stype = document.getElementById(\"typeselect\");\r\n        stype.value=\"public\";\r\n\r\n    };\r\n    //Копировать шаблон\r\n    const CopyShablon =(id)=>{\r\n        var s_copy = Object.assign([], shablon_cards);\r\n        var i_copy = [];\r\n        var new_shablon;\r\n        for(var i = 0; i<s_copy.length; i++){\r\n            if(s_copy[i].id === id){\r\n                new_shablon = {\r\n                    id: s_copy[i].id,\r\n                    title: s_copy[i].title,\r\n                    link: s_copy[i].link,\r\n                    data: s_copy[i].data,\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        console.log(new_shablon);\r\n        //Здесь надо получить записи о вопросах данного шаблона\r\n        //из бд и запихнуть их в i_copy, после чего записать\r\n        //данные из new_shablon и i_copy в бд, если нельзя создать копию сразу на беке.\r\n        ReloadCardList();\r\n    };\r\n    //Удалить шаблон //Сюда надо подкрутить удаление шаблона\r\n    const DeleteShablon =(id)=>{\r\n        console.log(\"delete - \" + id);\r\n\r\n        //Это для перезагрузки списка\r\n        var title = document.getElementById(\"InSearch\");\r\n        ReloadCardList(title.value);\r\n    };\r\n    //Копировать ссылку на шаблон - работает\r\n    const CopyLink =(link)=>{\r\n        console.log(link);\r\n        navigator.clipboard.writeText(link);\r\n    };\r\n    //Редактировать шаблон\r\n    const EditShablon =(id)=>{\r\n\r\n        setValue((prevState) => []);\r\n\r\n        //Получаем структуру из вопросов конкретного шаблона\r\n        //в виде x = [{id: 1, question_type: '', question_text: '', answer: [] }]\r\n\r\n        var x = [];\r\n        for(var j=0;j<x.length;j++){\r\n            var newitem = {\r\n                id: x[j].id,\r\n                question_type: x[j].question_type,\r\n                question_text: x[j].question_text,\r\n                answer: x[j].answer\r\n            };\r\n            setValue((prevState) => [...prevState, newitem]);\r\n        }\r\n\r\n        let title = document.getElementById('shablon_title');\r\n        title.value=\"Название\";\r\n        let stype = document.getElementById(\"typeselect\");\r\n        stype.value=\"public\";\r\n    }\r\n\r\n    //Показать результаты\r\n    const ShowResult =(id)=>{\r\n        const res = [{id: 0, title: 'Title1', reuls: 'res1'}, {id: 1, title: 'Title2', reuls: 'res2'}];\r\n        console.log(\"res\");\r\n        var zxc = document.getElementById('mainp');\r\n        zxc.innerHTML =  ReactDOMServer.renderToString(<Result res_answ={res}></Result>)\r\n\r\n    }\r\n\r\n    return(\r\n        <div id = \"main_block_c\">\r\n            <div id=\"block1\">\r\n                <MainButtoms \r\n                    NewShablon={NewShablon} \r\n                    List = {shablon_cards}\r\n                    CopyShablon = {CopyShablon}\r\n                    CopyLink = {CopyLink}\r\n                    EditShablon = {EditShablon}\r\n                    DeleteShablon = {DeleteShablon}\r\n                    ReloadList = {ReloadCardList}\r\n                    ShowResult = {ShowResult}\r\n                    >\r\n                </MainButtoms>\r\n            </div>\r\n            <div id=\"block2\">\r\n                <div className = \"mainp\" id = \"mainp\">\r\n                    <h1>Название</h1>\r\n                    <input type = \"text\" id = \"shablon_title\" name='Shablon_title' autoFocus={true}></input>\r\n                    <h1>Тип опроса</h1>\r\n                    <select id =\"typeselect\" name='shablontype'>\r\n                        <option value=\"public\">Публичный</option>\r\n                        <option value=\"anon\">Анонимный</option>\r\n                    </select>\r\n                        {\r\n                            items.map((item) => {\r\n                                return(\r\n                                    <QPool \r\n                                    id={item.id} \r\n                                    key={item.id}\r\n                                    type={item.question_type}\r\n                                    text={item.question_text}\r\n                                    answ={item.answer}\r\n                                    image_delete={require('../images/close.png')}\r\n                                    onDeleted={deleteitem}\r\n                                    setInfo={SetQuestion}>\r\n                                    </QPool>\r\n                                );\r\n                            })\r\n                        }\r\n                    \r\n                    <button id=\"addtask\" onClick={additem}>\r\n                        <img src={require('../images/plus.png')} alt='add'></img>\r\n                        <h1>Добавить вопрос</h1>\r\n                    </button>\r\n                    <button id=\"addtask\" onClick={SaveShablon}>\r\n                        <h1>Сохранить</h1>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n        \r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}